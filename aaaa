#include <SPI.h>

#include <Wire.h>

#include <Adafruit_GFX.h>

#include <Adafruit_SSD1306.h>

#include <Encoder.h>

#include <TimeLib.h>


#define SCREEN_WIDTH 128

#define SCREEN_HEIGHT 64

#define OLED_RESET 4

#define SCREEN_ADDRESS 0x3C

#define CONFIRM_BUTTON_PIN 5

#define ALARM_BUTTON_PIN 4


Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

Encoder myEnc(2, 3); // Broches A et B de l'encodeur


int selected = 0;

int entered = -1;

long lastEncoded = 0;

long encoderValue = 0;

tmElements_t tm;

unsigned long lastButtonClickTime = 0;

const unsigned long doubleClickThreshold = 3000; // 3 secondes

boolean alarmOn = true; // État initial de l'alarme


void displayMenu();

void formatHeure();

void reglerReveil();

void tempsDeSnooze();

void toggleAlarm();


void toggleAlarm() {

  alarmOn = !alarmOn;

}

void setup() {

  pinMode(CONFIRM_BUTTON_PIN, INPUT_PULLUP); // Bouton pour valider

  pinMode(ALARM_BUTTON_PIN, INPUT_PULLUP);   // Bouton pour changer l'état de l'alarme

  Serial.begin(9600);


  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {

    Serial.println(F("SSD1306 allocation failed"));

    for (;;)

      ;

  }

  display.clearDisplay();

  display.display();

  delay(2000);

}


void loop() {

  displayMenu();

  int confirmButtonState = digitalRead(CONFIRM_BUTTON_PIN);


  // Appel de la fonction associée à l'option sélectionnée

  if (confirmButtonState == LOW) {

    unsigned long currentTime = millis();


    if (currentTime - lastButtonClickTime > doubleClickThreshold) {

      // Premier appui

      lastButtonClickTime = currentTime;

      entered = selected;


      switch (entered) {

        case 0:

          formatHeure();

          break;

        case 1:

          reglerReveil();

          break;

      }

    } else {

      // Deuxième appui dans le délai, retour au menu

      entered = -1;

    }

  }


  // Vérifier si le bouton de l'alarme est pressé

  if (digitalRead(ALARM_BUTTON_PIN) == LOW) {

    toggleAlarm();

    delay(500); // Délai pour éviter les rebonds du bouton

  }

}


void displayMenu() {

  int confirmButtonState = digitalRead(CONFIRM_BUTTON_PIN);


  long encoderNew = myEnc.read();

  if (encoderNew != lastEncoded) {

    if ((encoderNew > lastEncoded) || (encoderNew < lastEncoded)) {

      selected += (encoderNew > lastEncoded) ? 1 : -1;

      if (selected < 0)

        selected = 2;

      if (selected > 2)

        selected = 0;

    }

  }

  lastEncoded = encoderNew;


  if (confirmButtonState == LOW) {

    entered = selected;


    // Appeler la fonction associée à l'option sélectionnée

    switch (entered) {

      case 0:

        formatHeure();

        break;

      case 1:

        reglerReveil();

        break;

    }

  }


  const char *options[3] = {

      " 1.Format heure",

      " 2.Regler reveil",

      " 3.Temps pour eteindre reveil "};


  display.clearDisplay();

  display.setTextSize(1);

  display.setTextColor(SSD1306_WHITE);

  display.setCursor(0, 0);

  display.println(F("Menu"));

  display.println("");


  for (int i = 0; i < 3; i++) {

    if (i == selected) {

      display.setTextColor(SSD1306_BLACK, SSD1306_WHITE);

      display.println(options[i]);

    } else {

      display.setTextColor(SSD1306_WHITE);

      display.println(options[i]);

    }

  }


  // Afficher l'état de l'alarme en bas de l'écran

  display.setCursor(0, SCREEN_HEIGHT - 16);

  display.print(F("Alarm: "));

  display.print(alarmOn ? F("On") : F("Off"));


  display.display();

}


void formatHeure() {

  display.clearDisplay();

  display.setTextSize(1);

  display.setTextColor(SSD1306_WHITE);

  display.setCursor(0, 0);

  display.println(F("Format Heure"));

  display.println("");

  display.println(F("1. 12 heures"));

  display.println(F("2. 24 heures"));

  display.display();


  while (entered == 0) {

    int confirmButtonState = digitalRead(CONFIRM_BUTTON_PIN);

    if (confirmButtonState == LOW) {

      // Logique pour traiter la sélection (12h ou 24h)

      // Mettez à jour entered pour sortir de la boucle

      entered = -1;

    }

  }

}


void reglerReveil() {

  display.clearDisplay();

  display.setTextSize(1);

  display.setTextColor(SSD1306_WHITE);

  display.setCursor(0, 0);

  display.println(F("Regler Reveil"));

  display.println("");

  display.display();


  tm.Hour = 0;

  tm.Minute = 0;

  tm.Second = 0;


  // Multiplicateur de vitesse pour ajuster la sensibilité de l'encodeur

  int speedMultiplier = 1; // Vous pouvez ajuster ce nombre selon vos besoins


  while (entered == 1) {

    long encoderNew = myEnc.read();

    if (encoderNew != lastEncoded) {

      if ((encoderNew > lastEncoded) || (encoderNew < lastEncoded)) {

        // Logique pour traiter les variations de l'encodeur numérique

        tm.Minute += (encoderNew > lastEncoded) ? speedMultiplier : -speedMultiplier;

        if (tm.Minute > 59) {

          tm.Minute = 0;

          tm.Hour = (tm.Hour + 1) % 24; // Passage à une nouvelle heure

        } else if (tm.Minute < 0) {

          tm.Minute = 59;

          tm.Hour = (tm.Hour + 23) % 24; // Passage à une nouvelle heure

        }


        display.clearDisplay();

        display.setTextSize(2);

        display.setTextColor(SSD1306_WHITE);

        display.setCursor(10, 10);

        display.print(String(tm.Hour) + ":" + String(tm.Minute));

        display.display();

      }
      // Vérifier l'état du bouton de confirmation
        int confirmButtonState = digitalRead(CONFIRM_BUTTON_PIN);
          if (confirmButtonState == LOW) {
            // Si le bouton est pressé, sortir de la boucle
            delay(500); // Délai pour le rebond du bouton
            entered = -1; // Réinitialiser 'entered' pour revenir au menu
             // Sortir de la boucle while
             displayMenu();
        }

      lastEncoded = encoderNew;

    }

  }

   
  displayMenu();
  entered = -1;

}
